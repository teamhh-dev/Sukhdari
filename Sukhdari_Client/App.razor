@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Microsoft.Extensions.Logging
@inject LazyAssemblyLoader AssemblyLoader
@inject ILogger<App> Logger

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true" AdditionalAssemblies="@lazyLoadedAssemblies"
        OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(HomeLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(HomeLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private List<Assembly> lazyLoadedAssemblies = new();

    private async Task OnNavigateAsync(NavigationContext args)
    {
        try
        {

            if (args.Path.StartsWith(""))
            {
                var assemblies = await AssemblyLoader.LoadAssembliesAsync(
                    new[] { "System.Private.Xml.dll" });
                assemblies = await AssemblyLoader.LoadAssembliesAsync(
                new[] { "System.Data.Common.dll" });
                assemblies = await AssemblyLoader.LoadAssembliesAsync(
                new[] { "Newtonsoft.Json.dll" });
                assemblies = await AssemblyLoader.LoadAssembliesAsync(
                new[] { "System.Linq.Expressions.dll" });
                
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Error: {Message}", ex.Message);
        }
    }
}