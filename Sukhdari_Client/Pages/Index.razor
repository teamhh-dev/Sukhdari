@page "/"
@layout HomeLayout
@inject IStoreService Store
<div id="carouselDiv" class="row p-0 m-0">
    <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
        <ol class="carousel-indicators">
            <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
            <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
        </ol>
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img class="d-block w-100" src="images/slide1.jpg" alt="First slide">
            </div>
            <div class="carousel-item">
                <img class="d-block w-100" src="images/slide2.png" alt="Second slide">
            </div>
        </div>
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
</div>
@*search bar*@
<div class="bg-light p-3 col-12">
    <div class="ml-4 row">
        <select @bind="@selectedFilter" class="btn btn-primary col-2">
            <option value="store">Store</option>
            <option value="category">Category</option>
            <option value="product">Product</option>
        </select>
        <input @bind-value="SearchTerm" @bind-value:event="oninput" @onkeyup="@searchResults" class="form-control col-9 shadow-none border-dark ml-2 mr-2" />
        
    </div>
</div>

<div class="row m-0">
    <div class="card bg-light col-2 m-2 p-2 filterDiv" style="left:1% ">
        <h4>Filters</h4>
        <hr />
        <h5>Location</h5>
        <div class="form-check ml-2">
            @if (AllStores != null && AllStores.Any())
            {
                @foreach (var store in AllStores)
                {
                    @if (!countries.Contains(store.Country))
                    {
                        countries.Add(store.Country);
                    }
                }
            }
            @foreach (var country in countries)
                {
                    <input class="form-check-input" type="checkbox" @onchange="@(async (e) => await CheckboxClicked(country, e.Value))">
                    <label class="form-check-label" for="flexCheckDefault">
                        @country
                    </label>
                     <br />    
                }
               
        </div>
        <hr />
        <h5>Price</h5>
        <div class="ml-2 row">
            <input type="number" class="col-5 p-0 mr-1" @bind-value="min" />
            <input type="number" class="col-5 p-0" @bind-value="max" />
        </div>
        <div>
            <br />
            <div class="ml-2">
            <button class="col-5 mr-1 btn btn-primary" type="submit" @onclick="findStoresByPrice">Search</button>
            <button class="col-5 btn btn-success" type="submit" @onclick="ResetStores">Reset</button>
            </div>
        </div>
        <hr />

        <h5>Store Type</h5>
        <div class="form-check ml-2">
            @if (FilteredStores != null && FilteredStores.Any())
            {
                @foreach (var type in FilteredStores)
                {
                    @if (!storeTypes.Contains(type.Type))
                    {
                        storeTypes.Add(type.Type);
                    }
                }
            }
            @foreach (var type in storeTypes)
                {
                    <input class="form-check-input" type="checkbox" @onchange="@(async (e) => await StoreTypeCheckbox(type, e.Value))">
                    <label class="form-check-label" for="flexCheckDefault">
                        @type
                    </label>
                     <br />    
                }
        </div>

        <h5>Discount</h5>
        <div class="form-check ml-2">

           @if(checkBoxIndex[0] == 0)
            {
                <input type="checkbox" class="form-check-input" @onchange="@((e) => DiscountCheckboxClicked(25, 0, e.Value))" >
                <label class="form-check-label">Upto 25%</label><br />
            }
            else if(checkBoxIndex[0] == 1)
            {
                <input type="checkbox" class="form-check-input" @onchange="@((e) => DiscountCheckboxClicked(25, 0, e.Value))" checked>
                <label class="form-check-label">Upto 25%</label><br />
            }
                
            @if(checkBoxIndex[1] == 0)
            {
                <input class="form-check-input" type="checkbox" @onchange="@((e) => DiscountCheckboxClicked(50, 1, e.Value))">
                <label class="form-check-label">Upto 50%</label><br />
            }
            else if(checkBoxIndex[1] == 1)
            {
                <input class="form-check-input" type="checkbox" @onchange="@((e) => DiscountCheckboxClicked(50, 1, e.Value))" checked>
                <label class="form-check-label">Upto 50%</label><br />
            }
            @if(checkBoxIndex[2] == 0)
            {
                <input class="form-check-input" type="checkbox" @onchange="@((e) => DiscountCheckboxClicked(75, 2, e.Value))" >
                <label class="form-check-label">Upto 75%</label><br />
                    
            }
            else if(checkBoxIndex[2] == 1)
            {
                <input class="form-check-input" type="checkbox" @onchange="@((e) => DiscountCheckboxClicked(75, 2, e.Value))" checked>
                <label class="form-check-label">Upto 75%</label><br />
            }
            
        </div>
      

    </div>

    <div class="form-inline justify-content-center mt-4 col-9">
        @if (Stores == null)
        {
        <div style="top:50%;left:53%;margin-top:-50px;margin-left:-100px;">
            <img src="Images/loader.gif" />
        </div> 
            }
        else if (Stores != null && Stores.Any())
        {
            @foreach (var store in FilteredStores)
            {
                int imageIndex = 0;
                int dataSlideTag = 0;
                <div class="card storeCard col-lg-3 col-md-5 col-11 m-3 p-0 shadow" style="text-decoration:none;">
                    <div id="carouselDiv" class="row p-0 m-0">
                        <div id="@caresoltag" class="carousel slide" data-ride="carousel" data-interval="4000">
                            <ol class="carousel-indicators">
                                @foreach (var image in store.StoreImages )
                                {
                                    @if (imageIndex == 0)
                                    {
                                        <li data-target="#carouselExampleIndicators" data-slide-to="@dataSlideTag" class="active"></li>
                                    }
                                    else
                                    {
                                        <li data-target="#carouselExampleIndicators" data-slide-to="@dataSlideTag"></li>
                                    }
                                    dataSlideTag++;
                                 }
                            </ol>
                        <div class="carousel-inner col-12 min-vh-30 p-0" style="width:100%; height:200px; !important">
                            
                            @foreach (var image in store.StoreImages )
                             {
                                @if (imageIndex == 0)
                                 {
                                    <div class="carousel-item active">
                                        <img class="card-img-top" src="@image.StoreImageUrl" onerror="this.src = '/Images/store.jpg';" alt="Product image cap" />
                                        @if (array[store.Id] != 0)
                                        {
                                            <span class="card-batch">Upto @array[store.Id]%</span>
                                        }

                                    </div> 
                                 }
                                 else
                                 {
                                    <div class="carousel-item">
                                        <img class="card-img-top" src="@image.StoreImageUrl" onerror="this.src = '/Images/store.jpg';" alt="Product image cap" />
                                    </div>
                                 }
                                 imageIndex++;
                             }
                @{imageIndex = 0;}

                @if (store.StoreImages.Count==0)
                {
                    <div class="carousel-item active">
                        <img class="card-img-top" src="/Images/store.jpg" onerror="this.src = '/Images/store.jpg';" alt="Product image cap" />
                    </div>
                }

            </div>
            <a class="carousel-control-prev" href="#@caresoltag" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#@caresoltag" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>
    <div>
            <div class="card-body pt-0 pb-0 pl-2">
                <h5 class="card-title text-dark m-0">@store.Name</h5>
            @*</div>
            <div class="card-footer pt-0 pb-0 pl-2">*@
                <p class="card-text m-0"><small class="text-muted">@store.Type</small></p>
            </div>
        </div>
       @* <div class="justify-content-center col-12">
    <a href="@($"stores/store/{store.Id}")" class="btn btn-primary m-2 col-11">Explore</a>
    <a href="@($"stores/about/{store.Id}")" class="btn btn-success m-2 col-11">Contact</a>
    </div>*@
    
    <div class="row d-flex flex-row justify-content-center col-12 m-0 p-0 ">
    <a href="@($"stores/store/{store.Id}")" class="btn btn-primary m-2 col-3"><i class="fa fa-eye"></i></a>
    <a href="@($"stores/about/{store.Id}")" class="btn btn-secondary m-2 col-3"><i class="fa fa-info"></i></a>
    <a href="@($"stores/contact/{store.Id}")" class="btn btn-danger m-2 col-3"><span class="fa fa-phone"></span></a>
       </div>         
    @{caresoltag++;}
</div>} 
        }
        else
        {
            <h2>Curruntly no store is available :)</h2>
        }
    </div>
</div>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">

@code

{
    public int caresoltag = 0;
    public string selectedFilter = "store";
    public string SearchTerm { get; set; } = "";
    public IEnumerable<StoreDTO> FilteredStores { get; set; }
    public IEnumerable<StoreTagDTO> AllTags { get; set; }
    public IEnumerable<StoreDTO> Stores { get; set; }
    public IEnumerable<StoreDTO> AllStores { get; set; }
    public IEnumerable<StoreDTO> test { get; set; }
    public List<string> countries = new List<string>();
    public List<string> storeTypes = new List<string>();
    public List<string> storeTypeList = new List<string>();
    int[] checkBoxIndex = new int[3]{ 0, 0, 0 };
    public float[] array;
    public int[] discountList = { 25, 50, 75 };
    int min = 0;
    int max = 10000;

    public List<string> selectedCountries = new List<string>();
    protected override async Task OnInitializedAsync()
    {
        Stores = await Store.getAllStores();
        AllStores = await Store.getAllStores();
        FilteredStores = Stores;
        AllTags = await Store.getAllStoreTags();

        if(Stores != null && Stores.Any())
        {
             var storeID = Stores.OrderByDescending(i => i.Id).FirstOrDefault().Id;
            storeID = storeID + 1;
            array = new float[storeID];
            foreach(var store in Stores)
            {
                float? maxDiscount = 0;
                var products = await Store.GetStoreProducts(store.Id);
                foreach(var product in products)
                {
                    if(maxDiscount<product.DiscountPercentage)
                    {
                        maxDiscount = product.DiscountPercentage;
                    }
                }
                store.maxDiscount = maxDiscount.Value;
                array[store.Id] = maxDiscount.Value;
            }
        }
       
        
    }
    public async Task searchByRange()
    {
        Stores = await Store.SearchStoreByProductPrice(min, max);
    }

    public async Task CheckboxClicked(string countryID, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!selectedCountries.Contains(countryID))
            {
                selectedCountries.Add(countryID);
            }
        }
        else
        {
            if (selectedCountries.Contains(countryID))
            {
                selectedCountries.Remove(countryID);
            }
        }
        if (!selectedCountries.Any())
        {
            await ResetStores();
        }
        else
        {
            if (selectedCountries != null && selectedCountries.Any())
            {
                FilteredStores = AllStores.Where(i => i.Country.ToLower().Contains(selectedCountries[0].ToLower())).ToList();
                int count = 1;
                foreach (var country in selectedCountries)
                {
                    if (count != 1)
                    {
                        var test = AllStores.Where(i => i.Country.ToLower().Contains(country.ToLower())).ToList();
                        FilteredStores = FilteredStores.Union(test);
                    }
                    count++;
                }
            }
        }
    }
    public async Task findStoresByPrice()
    {
        Stores = await Store.SearchStoreByProductPrice(min, max);
        FilteredStores = Stores;
    }
    public async Task ResetStores()
    {
        min = 0;
        max = 10000;
        Stores = await Store.getAllStores();
        FilteredStores = Stores;

    }
    public async Task searchResults()
    {
        if (selectedFilter == "store")
        {
            if (SearchTerm == "")
            {
                FilteredStores = Stores;
                AllTags = await Store.getAllStoreTags();
            }
            else
            {
                FilteredStores = Stores.Where(i => i.Name.ToLower().Contains(SearchTerm.ToLower())).ToList();
                AllTags = AllTags.Where(i => i.tagName.ToLower().Contains(SearchTerm.ToLower())).ToList();
                foreach (var tagStore in AllTags)
                {
                    var store = Stores.FirstOrDefault(i => i.Id == tagStore.storeId);
                    if (!FilteredStores.Contains(store))
                    {
                        @*IEnumerable<StoreDTO> tag = new List<StoreDTO>();
                        tag = tag.Append(store);
                        List<StoreDTO> stores = new List<StoreDTO>();
                        stores.Add(store);*@
                        FilteredStores = FilteredStores.Append(store);
                    }
                }
            }
        }
        else if (selectedFilter == "product")
        {
            if (SearchTerm == "")
            {
                FilteredStores = Stores;
            }
            else
            {
                FilteredStores = await Store.SearchStoreByProductName(SearchTerm);
            }
        }
        else if (selectedFilter == "category")
        {
            if (SearchTerm == "")
            {
                FilteredStores = Stores;
            }
            else
            {
                FilteredStores = await Store.SearchStoreByCategory(SearchTerm);
            }
        }  
    }
    public void DiscountCheckboxClicked(int discount, int index, object checkedValue )
    {
        if ((bool)checkedValue)
        {
            checkBoxIndex[0] = 0;
            checkBoxIndex[1] = 0;
            checkBoxIndex[2] = 0;
            checkBoxIndex[index] = 1;
            if (discount == 25)
            {
                FilteredStores = Stores.Where(i => i.maxDiscount <= 25 && i.maxDiscount >= 1).ToList();
                FilteredStores = Stores.Where(i => i.maxDiscount <= 25 && i.maxDiscount >= 1).ToList();
            }
            else if(discount == 50)
            {
                FilteredStores = Stores.Where(i => i.maxDiscount <= 50 && i.maxDiscount >= 1).ToList();
            }
            else if (discount == 75)
            {
                FilteredStores = Stores.Where(i => i.maxDiscount <= 75 && i.maxDiscount >= 1).ToList();
            }
        }
        else
        {
            checkBoxIndex[index] = 0;
            FilteredStores = Stores;
        }
    }
    public async Task StoreTypeCheckbox(string storeTypeStr, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!storeTypeList.Contains(storeTypeStr))
            {
                storeTypeList.Add(storeTypeStr);
            }
        }
        else
        {
            if (storeTypeList.Contains(storeTypeStr))
            {
                storeTypeList.Remove(storeTypeStr);
            }
        }
        if (!storeTypeList.Any())
        {
            await ResetStores();
        }
        else
        {
            if (storeTypeList != null && storeTypeList.Any())
            {
                FilteredStores = AllStores.Where(i => i.Type == storeTypeList[0]).ToList();
                int count = 0;
                foreach (var type in storeTypeList)
                {   
                    if (count != 0)
                    {
                        var testStore = AllStores.Where(i => i.Type == type).ToList();
                        FilteredStores = FilteredStores.Union(testStore); 
                    }
                    count++;
                }
            }
        }
    }


}