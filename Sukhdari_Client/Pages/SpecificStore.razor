@page "/stores/store/{Id:int}"
@layout StoreLayout
@inject IStoreService Store
@inject IUserIpService userIp

@*<h1>@ipAddress.IP</h1>
<h1>@ipAddress.timeNow</h1>*@

@*search bar*@0
<div class="bg-light p-3 col-12">
    <div class="ml-4 row">
        <select class="btn btn-primary col-2">
            <option value="category">Category</option>
            <option value="product">Product</option>
        </select>
        <input @bind-value="SearchProduct" @bind-value:event="oninput" @onkeyup="@searchProductResults"  class="form-control col-9 shadow-none border-dark ml-2 mr-2" />
    </div>
</div>

<div class="row m-0">
    <div class="card bg-light col-2 m-2 p-2 filterDiv" style="left:1% ">
        @if (Products != null && Products.Any())
        {
            <h4>Filters</h4>
            <hr />
            <h5>Categories</h5>
            <div class="form-check ml-2">
                @if (allCategories != null && allCategories.Any())
                {
                    @foreach (var category in allCategories)
                    {
                        <input class="form-check-input" type="checkbox" @onchange="@(async (e) => await CategoryCheckboxClicked(category.Id, e.Value))">
                        <label class="form-check-label" for="flexCheckDefault">
                            @category.Name
                        </label>
                        <br /> 
                    }
                }
            </div>
            <hr />
            <h5>Discount</h5>
            <div class="form-check ml-2">
                
                <input type="radio" class="form-check-input"  @onclick="(() => { RadioButtonClicked(25); })" >
                <label class="form-check-label">Upto 25%</label><br />
            
                <input class="form-check-input" type="radio" @onclick="(() => { RadioButtonClicked(50); })">
                <label class="form-check-label">Upto 50%</label><br />
            
                <input class="form-check-input" type="radio" @onclick="(() => { RadioButtonClicked(75); })" >
                <label class="form-check-label">Upto75%</label><br />
            
            </div>
        }
    </div>
    <div class="form-inline justify-content-center mt-4 col-9">
    @if (Products == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (Products != null && Products.Any())
    {
        @foreach (var product in FilteredProducts)
        {
            int dataSlideTag = 0;
            int imageIndex = 0;

            <div class="card col-lg-3 col-md-5 col-11 m-3 p-0 shadow" style="text-decoration:none;">
                <div id="carouselDiv" class="row p-0 m-0">
                    <div id="@caresoltag" class="carousel slide" data-ride="carousel" data-interval="4000">
                        <ol class="carousel-indicators">
                            @foreach (var image in product.ProductImages)
                            {
                                @if (imageIndex == 0)
                                {
                                    <li data-target="#carouselExampleIndicators" data-slide-to="@dataSlideTag" class="active"></li>
                                }
                                else
                                {
                                    <li data-target="#carouselExampleIndicators" data-slide-to="@dataSlideTag"></li>
                                }
                                dataSlideTag++;
                            }
                        </ol>
                        <div class="carousel-inner col-12 min-vh-30 p-0" style="height:160px; !important">
                            <div style="position:relative;">
                                @if (product.DiscountPercentage > 0)
                                {
                                    <p class="card-text p-1 bg-success"><small class="text-light">@product.DiscountPercentage% Off</small></p>
                                }
                            </div>
                            @foreach (var image in product.ProductImages)
                            {
                                @if (imageIndex == 0)
                                {
                                    <div class="carousel-item active">
                                        <img class="card-img-top" src="@image.ProductImageUrl" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                                    </div> }
                                else
                                {
                                    <div class="carousel-item">
                                        <img class="card-img-top" src="@image.ProductImageUrl" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                                    </div>}imageIndex++;
                            }
                            @{imageIndex = 0;}

                            @if (product.ProductImages.Count == 0)
                            {
                                <div class="carousel-item active">
                                    <img class="card-img-top" src="/Images/product.png" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                                </div>
                            }

                        </div>
                        <a class="carousel-control-prev" href="#@caresoltag" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#@caresoltag" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <h5 class="card-title text-dark">@product.Name</h5>
                    <p class="card-text"><small class="text-muted">Price = @product.Price PKR</small></p>
                    <a href="@($"stores/product/{product.Id}/{Id}")" class="btn btn-primary mr-1 col-12">View</a>
                </div>
                @{caresoltag++;}
            </div>
        }
    }
    else
    {
        <h2>This Store has no Products :)</h2>
    }
</div>
</div>
@code
{
    [Parameter]
    public int Id { get; set; }
    public string SearchProduct { get; set; } = "";
    public IEnumerable<ProductDTO> FilteredProducts { get; set; }
    public IEnumerable<CategoryDTO> allCategories { get; set; }
    public int caresoltag = 0;
    public UserIpDTO ipAddress { get; set; } = new UserIpDTO();
    public DateTime timeNow { get; set; }
    public IEnumerable<ProductDTO> Products { get; set; }
    public List<int> selectedCategories = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ipAddress = await userIp.GetUserIPAsync();
            timeNow = DateTime.Now;
            ipAddress.timeNow = timeNow;
            ipAddress.StoreId=Id;
            userIp.StoreIp(ipAddress);
        }
        catch (Exception e)
        {

        }
        Products = await Store.GetStoreProducts(Id);
        FilteredProducts = Products;
        allCategories = await Store.getStoreCategories(Id);
        Store.AddStoreClickCount(Id);
    }
    public async Task DiscountCheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            FilteredProducts = await Store.getDiscountedProducts(Id);
        }
        else
        {
            FilteredProducts = Products;
        }
    }
    public async Task CategoryCheckboxClicked(int categoryId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!selectedCategories.Contains(categoryId))
            {
                selectedCategories.Add(categoryId);
            }

            FilteredProducts = await Store.getCategoryProducts(categoryId);
        }
        else
        {
            if (selectedCategories.Contains(categoryId))
            {
                selectedCategories.Remove(categoryId);
            }
        }
        if (!selectedCategories.Any())
        {
            FilteredProducts = Products;
        }
        else
        {
            if (selectedCategories != null && selectedCategories.Any())
            {
                FilteredProducts = Products.Where(i => i.CategoryId == selectedCategories[0]).ToList();
                int count = 1;
                foreach (var category in selectedCategories)
                {
                    if (count != 1)
                    {
                        var test = await Store.getCategoryProducts(category);
                        FilteredProducts = FilteredProducts.Union(test);
                    }
                    count++;
                }
            }
        }
    }
    public void searchProductResults()
    {
        if (SearchProduct == "")
        {
            FilteredProducts = Products;
        }
        else
        {
            FilteredProducts = Products.Where(i => i.Name.ToLower().Contains(SearchProduct.ToLower())).ToList();
        }
    }
    public void RadioButtonClicked(float? discount)
    {
        if (discount == 25)
        {
           FilteredProducts = Products.Where(i => i.DiscountPercentage <= 25).ToList();
        }
        else if(discount == 50)
        {
            FilteredProducts = Products.Where(i => i.DiscountPercentage <= 50).ToList();
        }
        else if (discount == 75)
        {
            FilteredProducts = Products.Where(i => i.DiscountPercentage <= 75).ToList();
        }
    }
}
