@page "/stores/store/{Id:int}"
@layout MainLayout
@inject IStoreService Store


<div class="container p-3">
    <div class="row">
        <div class="col-4">
    
        </div>
        <div class="col-4">
            <form action="#" method="get" id="searchForm" class="input-group">
                @* change with edit form when get model same with inside fields *@

                <input type="text" class="form-control col-xl-7 shadow-none" placeholder="Search term...">
                <span class="input-group-btn">
                    <button class="btn btn-dark shadow-none" type="submit">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                </span>
            </form>
        </div>
    </div>
</div>


<div class="form-inline justify-content-center mt-4">
    @if (Products != null && Products.Any())
    {
        @foreach (var product in Products)
        {
            <a href="#" class="card col-3 m-3 p-0 shadow" style="text-decoration:none;">
                <div>
                    @foreach (var image in product.ProductImages)
                    {
                        <img class="card-img-top" src="@image.ProductImageUrl" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                    }
                    <div class="card-body">
                        <h5 class="card-title text-dark">@product.Name</h5>
                        <p class="card-text"><small class="text-muted">@product.Price</small></p>
                    </div>
                </div>
            </a>
        }
    }
    else 
    {
        <h2>This Store has no Products :)</h2>
    }
</div>
@code
{
    [Parameter]
    public int Id { get; set; }

    public IEnumerable<ProductDTO> Products { get; set; }
    protected override async Task OnInitializedAsync()
    {
        //await Task.Delay(2000);
        Products = await Store.GetStoreProducts(Id);
    }
}
