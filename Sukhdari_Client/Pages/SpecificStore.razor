@page "/stores/store/{Id:int}"
@layout StoreLayout
@inject IStoreService Store
@inject IUserIpService userIp

@*<h1>@ipAddress.IP</h1>
<h1>@ipAddress.timeNow</h1>*@
<div class="form-inline justify-content-center mt-4 col-9">
    @if (Products != null && Products.Any())
    {
        @foreach (var product in Products)
        {
            int p = 0;
            int a = 0;
            <div class="card col-lg-3 col-md-5 col-11 m-3 p-0 shadow" style="text-decoration:none;">
                <div id="carouselDiv" class="row p-0 m-0">
                    <div id="@caresoltag" class="carousel slide" data-ride="carousel" data-interval="4000">
                        <ol class="carousel-indicators">
                            @foreach (var image in product.ProductImages)
                            {
                                @if (a == 0)
                                {
                                    <li data-target="#carouselExampleIndicators" data-slide-to="@p" class="active"></li>
                                    }
                                else
                                {
                                    <li data-target="#carouselExampleIndicators" data-slide-to="@p"></li>
                                    }
                                p++;
                            }
                        </ol>
                        <div class="carousel-inner col-12 min-vh-30" style="height:150px; !important">
                            @foreach (var image in product.ProductImages)
                            {
                        @if (a == 0)
                        {
                        <div class="carousel-item active">
                            <img class="card-img-top" src="@image.ProductImageUrl" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                        </div> }
                                                else
                                                {
                        <div class="carousel-item">
                            <img class="card-img-top" src="@image.ProductImageUrl" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                        </div>}a++;
                                            }
                            @{a = 0;}

                            @if (product.ProductImages.Count == 0)
                            {
                            <div class="carousel-item active">
                                <img class="card-img-top" src="/Images/product.png" onerror="this.src = '/Images/product.png';" alt="Product image cap" />
                            </div>
                            }

                        </div>
                        <a class="carousel-control-prev" href="#@caresoltag" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#@caresoltag" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
                    <div class="card-body">
                        <h5 class="card-title text-dark">@product.Name</h5>
                        <p class="card-text"><small class="text-muted">@product.Price</small></p>
                        <button class="btn btn-primary mr-1">View</button><button class="btn btn-success">Add to Cart</button>
                    </div>
                @{caresoltag++;}
            </div>
            }
     }
      else
      {
           <h2>This Store has no Products :)</h2>
      }
</div>

@code
{
    [Parameter]
    public int Id { get; set; }
    public int caresoltag = 0;
    public UserIpDTO ipAddress { get; set; } = new UserIpDTO();
    public DateTime timeNow { get; set; }

    public IEnumerable<ProductDTO> Products { get; set; }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            ipAddress = await userIp.GetUserIPAsync();
            timeNow = DateTime.Now;
            ipAddress.timeNow = timeNow;
            ipAddress.StoreId=Id;
            userIp.StoreIp(ipAddress);
        }
        catch (Exception e)
        {

        }

        //await Task.Delay(2000);
        Products = await Store.GetStoreProducts(Id);
    }
}
