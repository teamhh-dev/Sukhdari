@page "/"
@page "/store/dashboard"
@layout StoreAdminLayoutT
@inject IStoreRepo Store
@inject ICategoryRepo Category
@inject IProductRepo Product
@inject IUserIPRepo IpRepo
@inject NavigationManager Navigator
@inject IJSRuntime js
@attribute [Authorize(Roles = Common.StaticDetails.Role_StoreAdmin)]

<div class="container-fluid">
    <div class="row mb-2">
        <div class="col-sm-6">
            <h1>Dashboard</h1>
        </div>
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-md-3">
            <div class="card-counter primary">
                <i class="fa fa-code-fork"></i>
                <span class="count-numbers">@productCount</span>
                <span class="count-name">Products</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card-counter success">
                <i class="fa fa-database"></i>
                <span class="count-numbers">@categoryCount</span>
                <span class="count-name">Categories</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card-counter info">
                <i class="fa fa-users"></i>
                <span class="count-numbers">10</span>
                <span class="count-name">Users</span>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card-counter danger">
                <i class="fa fa-shopping-bag"></i>
                <span class="count-numbers">10</span>
                <span class="count-name">Orders</span>
            </div>
        </div>
    </div>
</div>
<hr />


<div class="card  card-info">
    <div class="card-header">
        <h3 class="card-title">Daily Unique Visitors</h3>
    </div>
    <div class="card-body">
        <canvas id="myChart" style="height:40vh;" class="col-10"></canvas>

    </div>
</div>

<hr />
<div class="row col-md-12">
    <div class="card card-danger col-md-6">
        <div class="card-header">
            <h3 class="card-title">Top Categories</h3>
        </div>
        <div class="card-body">
            <RadzenChart class="col-md-12">
                @if(categoryClick != null && categoryClick.Any())
                {
                    <RadzenPieSeries Data=@categoryClick Title="Clicks" CategoryProperty="name" ValueProperty="clicks">

                    </RadzenPieSeries>
                }
            </RadzenChart>
        </div>
    </div>
    <div class="card card-info col-md-6">
        <div class="card-header">
            <h3 class="card-title">Top 5 Products</h3>
        </div>
        <div class="card-body">
            <MudPaper Class="pa-4">
                <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px"  InputData="@clicksData" InputLabels="@productNames">
                     <CustomGraphics>
		                <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total Clicks</text>
		                <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@totalClickCount</text>
	                </CustomGraphics>
                </MudChart>
            </MudPaper>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }
    public List<int> weekUniqueUsersCount { get; set; }
    public List<string> pastWeekDates { get; set; } = new List<string>();
    int productCount;
    int categoryCount;
    int count = 0;
    int? totalClickCount = 0;
    double[] clicksData;
    string[] productNames;
    class CategoryClickCount
    {
        public string name { get; set; }
        public int? clicks { get; set; }
    }
    List<CategoryClickCount> categoryClick = new List<CategoryClickCount>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (Store.GetStoreByAdminName(authState.User.Identity.Name) == null)
        { 
            Navigator.NavigateTo("/storeNotExist");
        }
        categoryCount = await Category.getCategoryCount(Store.GetStoreByAdminName(authState.User.Identity.Name).Id);
        productCount = await Product.getProductCount(Store.GetStoreByAdminName(authState.User.Identity.Name).Id);
        
        var products = await Product.getAllProducts(Store.GetStoreByAdminName(authState.User.Identity.Name).Id);
        var topProducts = products.OrderByDescending(i => i.ClickCount).Take(5);
        totalClickCount = products.Sum(i => i.ClickCount);
        clicksData = new double[topProducts.Count()];
        productNames = new string[topProducts.Count()];
        foreach (var product in topProducts)
        {
            double temp = (double)product.ClickCount;
            clicksData[count] = temp;
            productNames[count] = product.Name;
            count++;
        }
        var categories = await Category.GetAllCategories(Store.GetStoreByAdminName(authState.User.Identity.Name).Id);
        if(categories != null && categories.Any())
        {
            var topCategories = categories.OrderByDescending(i => i.ClickCount).Take(5);
            if(topCategories != null && topCategories.Any())
            {
                foreach(var category in topCategories)
                {
                    CategoryClickCount temp = new CategoryClickCount();
                    temp.name = category.Name;
                    temp.clicks = category.ClickCount;
                    categoryClick.Add(temp);
                }
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var authState = await AuthenticationState;
        for (int i = 6; i >= 0; i--)
        {
            pastWeekDates.Add(DateTime.Now.AddDays(Convert.ToDouble(-i)).ToLongDateString());
        }
        weekUniqueUsersCount = IpRepo.getPastWeekUniqueUsersCount(Store.GetStoreByAdminName(authState.User.Identity.Name).Id);
        await js.InvokeVoidAsync("loadChart", weekUniqueUsersCount, pastWeekDates); 
    }
}
