@page "/addCategory"@page "/category/update/{Id:int}"@page "/category/delete/{Id:int}"@layout StoreAdminLayoutT@inject IStoreRepo Store@inject ICategoryRepo Category@inject NavigationManager Navigator@inject IJSRuntime JsRuntime@attribute [Authorize(Roles = Common.StaticDetails.Role_StoreAdmin)]<div class="card card-info">    <div class="card-header">        <div class="card-title float-left pt-2">            <h3>@Title</h3>        </div>        @*@if (Id != null)
        {            <div class="d-flex float-right">                <button @onclick="DeleteCategory" class="btn btn-info text-white">                    <span class="oi oi-trash mr-0 mr-md-2" />                    <h5 class="d-md-inline-block d-none pt-1">Delete Category</h5>                </button>            </div>        }*@    </div>    <EditForm Model="CategoryDetails" OnValidSubmit="SaveCategory" class="form-horizontal">        <div class="card-body">            <DataAnnotationsValidator></DataAnnotationsValidator>            <div class="form-group">                <label class="col-md-7 control-label" for="category_name">CATEGORY NAME</label>                <div class="col-md-7">                    <InputText @bind-Value="CategoryDetails.Name" placeholder="Category Name" class="form-control input-md" />                    <ValidationMessage For="()=>CategoryDetails.Name"></ValidationMessage>                </div>            </div>            @if (btnName == "Update Category")
            {                <div class="form-group">                    <label class="col-md-7 control-label" for="discount percentage">Discount Percentage</label>                    <div class="col-md-7">                        <InputNumber @bind-Value="@CategoryDetails.DiscountPercentage" placeholder="Discount Percentage" class="form-control" />                        <ValidationMessage For="()=>CategoryDetails.DiscountPercentage"></ValidationMessage>                    </div>                </div>            }            <div class="form-group">                <label class="col-md-7 control-label" for="category_description">CATEGORY DESCRIPTION</label>                <div class="col-md-7">                    <InputTextArea @bind-Value="CategoryDetails.Description" class="form-control" />                    <ValidationMessage For="()=>CategoryDetails.Description"></ValidationMessage>                </div>            </div>            <div class="form-group">                <div class="col-md-7">                    <button type="submit" class="btn btn-info text-white">@btnName</button>                </div>            </div>        </div>    </EditForm></div>@*<DeleteConfirmation IsParentComponentProcessing="IsProcessing" CconfirmationChanged="DeleteCategory2">
</DeleteConfirmation>*@@code {
    private String Title { get; set; } = "Add Category";
    private String btnName { get; set; } = "Add Category";
    private bool IsProcessing { get; set; } = false;

    [Parameter]
    public int? Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    public CategoryDTO CategoryDetails { get; set; } = new CategoryDTO();

    public String StoreName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;

        var store = Store.GetStoreByAdminName(authState.User.Identity.Name);
        if (store == null)
        {
            Navigator.NavigateTo("/storeNotExist");
        }
        else
        {
            CategoryDetails.StoreId = store.Id;
            if (!authState.User.IsInRole(Common.StaticDetails.Role_StoreAdmin))
            {
                var uri = new Uri(Navigator.Uri);
                Navigator.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}");
            }
            if (Id != null)
            {
                //updating
                Title = "Update Category";
                btnName = "Update Category";
                var category = await Category.GetCategory(Id.Value, CategoryDetails.StoreId);
                CategoryDetails = category;
            }
        }

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    private async void SaveCategory()
    {
        var ans =  await Category.createCategory(CategoryDetails);
        string message = "Category Added Successfully";
        if(ans ==0 && CategoryDetails.Id==0) 
        {
            message = "Category with same name already exist";
            await JsRuntime.ToastrWarning(message);
            return;
        }

        else if(CategoryDetails.Id !=0)
        {
            message = "Category Updated Successfully"; 
        }
        CategoryDetails.Name = "";
        CategoryDetails.Description = "";
        StateHasChanged();
        //Navigator.NavigateTo("/category");
        await JsRuntime.ToastrSuccess(message);

    }
    private async void DeleteCategory()
    {
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }
    private async void DeleteCategory2(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await Category.deleteCategory(Id.Value);
            StateHasChanged();
            Navigator.NavigateTo("/category");
            await JsRuntime.ToastrSuccess("Category Deleted Successfully");
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        IsProcessing = false;
    } }